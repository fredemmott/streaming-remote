name: Continuous Integration
on: [push, pull_request]
jobs:
  check-generated-versions:
    name: Generated version files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: "Generate version files"
        run: mkdir build && cd build && cmake .. -DWITH_NATIVE_PLUGINS=OFF
      - name: "Check for changes"
        run: git diff --exit-code
  webui:
    name: Web UI - ${{matrix.build-type}}
    needs: [check-generated-versions]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Check tool versions
        run: |
          echo "Yarn: $(yarn --version)"
          echo "TSC: $(yarn run tsc --version)"
      - name: Build lib
        working-directory: js-client-lib
        run: yarn install && yarn run tsc
      - name: Build web UI
        working-directory: webui
        run: yarn install && yarn run webpack --mode ${{matrix.build-type}}
      - name: Copy files
        working-directory: webui
        run: |
          mkdir -p ${{runner.temp}}/artifacts/dist
          install ../LICENSE index.html site.css ${{runner.temp}}/artifacts
          install dist/bundle.js ${{runner.temp}}/artifacts/dist/bundle.js
      - uses: actions/upload-artifact@v2
        with:
          name: webui-${{matrix.build-type}}
          path: ${{runner.temp}}/artifacts
    strategy:
      matrix:
        build-type: [ "production", "development" ]
  streamdeck:
    name: StreamDeck Plugin - ${{matrix.build-type}}
    needs: [check-generated-versions]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install typescript
        run: brew install typescript
      - name: Check tool versions
        run: |
          echo "Yarn: $(yarn --version)"
          echo "TSC: $(yarn run tsc --version)"
      - name: Build lib
        working-directory: js-client-lib
        run: yarn install && yarn run tsc
      - name: Copy plugin directory
        run: cp -R streamdeck-plugin ${{runner.temp}}/com.fredemmott.streamingremote.sdPlugin
      - name: Build plugin
        working-directory: streamdeck-plugin
        run: yarn install && yarn run webpack --mode ${{matrix.build-type}}
      - name: Copy files
        run: |
          mkdir -p ${{runner.temp}}/com.fredemmott.streamingremote.sdPlugin/dist/
          install streamdeck-plugin/dist/bundle.js ${{runner.temp}}/com.fredemmott.streamingremote.sdPlugin/dist/bundle.js
          install LICENSE ${{runner.temp}}/com.fredemmott.streamingremote.sdPlugin/LICENSE
      - name: Checkout StreamDeck DistributionTool
        run: |
          BRANCH=streamdeck-distributiontool-v1.4
          git fetch origin $BRANCH
          git checkout origin/$BRANCH DistributionTool
      - name: Build .streamDeckPlugin
        run: |
          ./DistributionTool -b \
            -i ${{runner.temp}}/com.fredemmott.streamingremote.sdPlugin \
            -o .
          test -f com.fredemmott.streamingremote.streamDeckPlugin
      - uses: actions/upload-artifact@v2
        with:
          name: sdplugin-${{matrix.build-type}}
          path: com.fredemmott.streamingremote.streamDeckPlugin
    strategy:
      matrix:
        build-type: [ "production", "development" ]
  xsplit:
    name: XSplit Plugin (TypeScript) - ${{matrix.build-type}}
    needs: [check-generated-versions]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Check tool versions
        run: |
          echo "Yarn: $(yarn --version)"
          echo "TSC: $(yarn run tsc --version)"
      - name: Build XSplit plugin
        working-directory: xsplit-js-plugin
        run: yarn install && yarn run webpack --mode ${{matrix.build-type}}
      - name: Copy files
        working-directory: xsplit-js-plugin
        run: |
          mkdir -p ${{runner.temp}}/artifacts/dist
          install dist/bundle.js ${{runner.temp}}/artifacts/dist/bundle.js
          install ../LICENSE index.html index.xml index.css ${{runner.temp}}/artifacts/
        shell: bash
      - uses: actions/upload-artifact@v2
        with:
          name: xsplit-${{matrix.build-type}}
          path: ${{runner.temp}}/artifacts
    strategy:
      matrix:
        build-type: [ "production", "development" ]
  native-obs:
    name: OBS Plugin - ${{matrix.os}} - ${{matrix.build-type}}
    runs-on: ${{matrix.os}}-latest
    env:
      OBS_VERSION: 26.0.2
      OBS_BUILD_TYPE: Release
      QT_CACHE_VERSION: 5
    steps:
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v2
        if: matrix.os != 'windows' # https://github.com/actions/cache/issues/336
        with:
          path: ${{runner.temp}}/Qt
          key: Qt-${{matrix.qt-version}}-${{matrix.os}}-${{env.QT_CACHE_VERSION}}
      - uses: jurplel/install-qt-action@v2
        with:
          version: ${{matrix.qt-version}}
          dir: ${{runner.temp}}/Qt
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          arch: ${{matrix.qt-platform}}
          aqtversion: ==0.9.0
          extra: --archives qtbase qtsvg qtxml ${{matrix.qt-archives}}
      - name: Cache OBS
        id: cache-obs
        uses: actions/cache@v1
        with:
          path: obs-studio
          key: OBS-${{env.OBS_VERSION}}-${{ matrix.os }}
      - name: Install OBS dependencies (MacOS)
        if: matrix.os == 'macos' && steps.cache-obs.outputs.cache-hit != 'true'
        run: brew install ffmpeg x264 mbedtls swig
      - name: Install OBS dependencies (Windows)
        if: matrix.os == 'windows' && steps.cache-obs.outputs.cache-hit != 'true'
        run: |
          Invoke-WebRequest `
            -Uri https://obsproject.com/downloads/dependencies2017.zip `
            -OutFile dependencies2017.zip
          Expand-Archive `
            -Path dependencies2017.zip `
            -DestinationPath ${{runner.temp}}/obs-deps
        shell: powershell
      - name: Checkout OBS
        uses: actions/checkout@v2
        if: steps.cache-obs.outputs.cache-hit != 'true'
        with:
          repository: obsproject/obs-studio
          path: obs-studio
          ref: ${{env.OBS_VERSION}}
          submodules: recursive
      - name: Set build architecture (Windows)
        if: matrix.os == 'windows'
        run: echo CMAKE_PLATFORM_GENERATOR=x64 >> $GITHUB_ENV
      - name: Configure OBS
        if: steps.cache-obs.outputs.cache-hit != 'true'
        working-directory: obs-studio
        run: |
          mkdir build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=${OBS_BUILD_TYPE} \
            -DDepsPath=$(echo "${{runner.temp}}/obs-deps/win64" | tr "\\\\" /)
        shell: bash
      - name: Build OBS
        if: steps.cache-obs.outputs.cache-hit != 'true'
        working-directory: obs-studio/build
        run: cmake --build . --parallel --config ${OBS_BUILD_TYPE} --target libobs --target obs-frontend-api
      - name: Install dependencies (MacOS)
        if: matrix.os == 'macos'
        run: brew install libsodium
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: streaming-remote
      - name: Fetch code-signing key
        if: matrix.os == 'windows'
        env:
          CODE_SIGNING_PFX_BASE64: ${{ secrets.CODE_SIGNING_PFX_BASE64 }}
        run: '[System.Convert]::FromBase64String($Env:CODE_SIGNING_PFX_BASE64) | Set-Content ${{runner.temp}}/MyCert.pfx -AsByteStream'
      - name: Configure
        working-directory: streaming-remote
        run: |
          mkdir build
          cd build
          cmake .. `
            -DCMAKE_BUILD_TYPE=${{matrix.build-type}} `
            "-DSIGNTOOL_KEY_ARGS=/f;${{runner.temp}}/MyCert.pfx" `
            "-DCMAKE_INSTALL_BINDIR=${{runner.temp}}/prefix" `
            "-DCMAKE_INSTALL_LIBDIR=${{runner.temp}}/prefix" `
            -DWITH_XSPLIT=OFF `
            -DWITH_OBS=ON `
            "-DOBS_SOURCE_DIR=${{github.workspace}}/obs-studio/" `
            "-DOBS_BUILD_DIR=${{github.workspace}}/obs-studio/build/"
        shell: pwsh
      - name: Build
        working-directory: streaming-remote/build
        run: cmake --build . --parallel --config ${{matrix.build-type}}
      - name: Install
        working-directory: streaming-remote/build
        run: |
          cmake --install . --config ${{matrix.build-type}}
          install ../LICENSE ../LICENSE.OBS_COMBINED_WORK ${{runner.temp}}/prefix/
      - name: Copy files
        working-directory: ${{runner.temp}}/prefix
        run: |
          mkdir -p ../artifacts/obs
          rm *.lib || true
          install LICENSE LICENSE.OBS_COMBINED_WORK obs-streaming-remote.* ../artifacts/obs/
        shell: bash
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: native-obs-${{matrix.os}}-${{matrix.build-type}}
          path: ${{runner.temp}}/artifacts
    strategy:
      matrix:
        os: [macos, windows]
        build-type: [Release, Debug]
        include:
          - os: windows
            qt-archives: qtwinextras
            qt-version: 5.10.1
          - os: macos
            qt-archives: qtmacextras
            qt-version: 5.14.1
  native-xsplit:
    name: XSplit Plugin (native) - ${{matrix.os}} - ${{matrix.build-type}}
    runs-on: ${{matrix.os}}-latest
    steps:
      - name: Set build architecture (Windows)
        if: matrix.os == 'windows'
        run: echo CMAKE_PLATFORM_GENERATOR=x64 >> $GITHUB_ENV
      - name: Fetch code-signing key
        if: matrix.os == 'windows'
        env:
          CODE_SIGNING_PFX_BASE64: ${{ secrets.CODE_SIGNING_PFX_BASE64 }}
        run: '[System.Convert]::FromBase64String($Env:CODE_SIGNING_PFX_BASE64) | Set-Content ${{runner.temp}}/MyCert.pfx -AsByteStream'
      - name: Configure
        working-directory: streaming-remote
        run: |
          mkdir build
          cd build
          cmake .. `
            -DCMAKE_BUILD_TYPE=${{matrix.build-type}} `
            "-DSIGNTOOL_KEY_ARGS=/f;${{runner.temp}}/MyCert.pfx" `
            "-DCMAKE_INSTALL_BINDIR=${{runner.temp}}/prefix" `
            "-DCMAKE_INSTALL_LIBDIR=${{runner.temp}}/prefix" `
            -DWITH_XSPLIT=ON `
            -DWITH_OBS=OFF
        shell: pwsh
      - name: Build
        working-directory: streaming-remote/build
        run: cmake --build . --parallel --config ${{matrix.build-type}}
      - name: Install
        working-directory: streaming-remote/build
        run: |
          cmake --install . --config ${{matrix.build-type}}
          install ../LICENSE ${{runner.temp}}/prefix/
      - name: Copy files
        working-directory: ${{runner.temp}}/prefix
        if: matrix.os == 'windows'
        run: |
          mkdir -p ../artifacts/xsplit
          install LICENSE xsplit* ../artifacts/xsplit
        shell: bash
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: native-xsplit-${{matrix.os}}-${{matrix.build-type}}
          path: ${{runner.temp}}/artifacts
    strategy:
      matrix:
        os: [macos, windows]
        build-type: [Release, Debug]
  prepare-packages:
    name: Prepare packages
    needs: [native-obs, native-xsplit, streamdeck, webui, xsplit]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      with:
        path: ${{runner.temp}}/artifacts
    - name: Display downloaded files
      run: ls -R
      working-directory: ${{runner.temp}}/artifacts
    - name: Make output directory
      run: mkdir -p ${{runner.temp}}/final/
    - name: Prepare StreamDeck plugins
      working-directory: ${{runner.temp}}/artifacts
      run: |
        install \
          sdplugin-production/com.fredemmott.streamingremote.streamDeckPlugin \
          ${{runner.temp}}/final/
        install \
          sdplugin-development/com.fredemmott.streamingremote.streamDeckPlugin \
          ${{runner.temp}}/final/debug-com.fredemmott.streamingremote.streamDeckPlugin
    - name: Prepare Web UI
      working-directory: ${{runner.temp}}/artifacts
      run: |
        ( cd webui-production; 7z a ${{runner.temp}}/final/webui-streaming-remote.zip *)
        ( cd webui-development; 7z a ${{runner.temp}}/final/debug-webui-streaming-remote.zip *)
    - name: Prepare OBS plugins
      working-directory: ${{runner.temp}}/artifacts
      run: |
        ( cd native-obs-windows-Release/obs/; 7z a ${{runner.temp}}/final/obs-streaming-remote-win64.zip *)
        ( cd native-obs-macos-Release/obs/; 7z a ${{runner.temp}}/final/obs-streaming-remote-macos.zip  *)
        ( cd native-obs-windows-Debug/obs/; 7z a ${{runner.temp}}/final/debug-obs-streaming-remote-win64.zip *)
        ( cd native-obs-macos-Debug/obs/; 7z a ${{runner.temp}}/final/debug-obs-streaming-remote-macos.zip *)
    - name: Prepare XSplit plugins
      working-directory: ${{runner.temp}}/artifacts
      run: |
        mkdir -p ${{runner.temp}}/xsplit-debug/plugin ${{runner.temp}}/xsplit-release/plugin
        ( cd native-xsplit-windows-Release/xsplit/; install * ${{runner.temp}}/xsplit-release )
        ( cd native-xsplit-windows-Debug/xsplit/; install * ${{runner.temp}}/xsplit-debug )
        ( cd xsplit-production; rsync -av ./ ${{runner.temp}}/xsplit-release/plugin/ )
        ( cd xsplit-development; rsync -av ./ ${{runner.temp}}/xsplit-debug/plugin/ )
        cd ${{runner.temp}}/xsplit-release
        7z a ${{runner.temp}}/final/xsplit-streaming-remote.zip *
        cd ${{runner.temp}}/xsplit-debug
        7z a ${{runner.temp}}/final/debug-xsplit-streaming-remote.zip *
    - name: Display final files
      run: ls -R
      working-directory: ${{runner.temp}}/final
    - name: Check if this is a release push
      id: ref
      run: |
        if echo ${{github.ref}} | grep --silent refs/tags/v; then
          echo "::set-output name=is-release::true"
          echo "::set-output name=tag::$(echo ${{github.ref}} | awk -F/ '{print $NF}')"
        else
          echo "::set-output name=is-release::false"
        fi
    - name: Create Draft Release
      id: create-release
      if: steps.ref.outputs.is-release == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_name: Release ${{ steps.ref.outputs.tag }}
        tag_name: ${{steps.ref.outputs.tag}}
        draft: true
    - name: Attach OBS/Release/Win64
      if: steps.ref.outputs.is-release == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ${{runner.temp}}/final/obs-streaming-remote-win64.zip
        asset_name: obs-streaming-remote-win64.zip
        asset_content_type: application/zip
    - name: Attach OBS/Release/Macos
      if: steps.ref.outputs.is-release == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ${{runner.temp}}/final/obs-streaming-remote-macos.zip
        asset_name: obs-streaming-remote-macos.zip
        asset_content_type: application/zip
    - name: Attach OBS/Debug/Win64
      if: steps.ref.outputs.is-release == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ${{runner.temp}}/final/debug-obs-streaming-remote-win64.zip
        asset_name: debug-obs-streaming-remote-win64.zip
        asset_content_type: application/zip
    - name: Attach OBS/Debug/Macos
      if: steps.ref.outputs.is-release == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ${{runner.temp}}/final/debug-obs-streaming-remote-macos.zip
        asset_name: debug-obs-streaming-remote-macos.zip
        asset_content_type: application/zip
    - name: Attach XSplit/Release
      if: steps.ref.outputs.is-release == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ${{runner.temp}}/final/xsplit-streaming-remote.zip
        asset_name: xsplit-streaming-remote-win64.zip
        asset_content_type: application/zip
    - name: Attach XSplit/Debug
      if: steps.ref.outputs.is-release == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ${{runner.temp}}/final/debug-xsplit-streaming-remote.zip
        asset_name: debug-xsplit-streaming-remote-win64.zip
        asset_content_type: application/zip
    - name: Attach WebUI/Release
      if: steps.ref.outputs.is-release == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ${{runner.temp}}/final/webui-streaming-remote.zip
        asset_name: webui-streaming-remote.zip
        asset_content_type: application/zip
    - name: Attach WebUI/Debug
      if: steps.ref.outputs.is-release == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ${{runner.temp}}/final/debug-webui-streaming-remote.zip
        asset_name: debug-webui-streaming-remote.zip
        asset_content_type: application/zip
    - name: Attach SDPlugin/Release
      if: steps.ref.outputs.is-release == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ${{runner.temp}}/final/com.fredemmott.streamingremote.streamDeckPlugin
        asset_name : com.fredemmott.streamingremote.streamDeckPlugin
        asset_content_type: application/octet-stream
    - name: Attach SDPlugin/Debug
      if: steps.ref.outputs.is-release == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ${{runner.temp}}/final/debug-com.fredemmott.streamingremote.streamDeckPlugin
        asset_name : debug-com.fredemmott.streamingremote.streamDeckPlugin
        asset_content_type: application/octet-stream
